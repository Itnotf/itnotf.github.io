[{"title":"Obsidian + Hexo + GitHub Pages：从为知笔记自动发布到 Obsidian 驱动的全流程自动博客发布","url":"/2025/07/24/Obsidian%20+%20Hexo%20+%20GitHub%20Pages%EF%BC%9A%E4%BB%8E%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%88%B0%20Obsidian%20%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%85%A8%E6%B5%81%E7%A8%8B%E8%87%AA%E5%8A%A8%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83/","content":"\n背景我最初（一看已是十年前）使用为知笔记（WizNote）记录日常，借助它的「发布到博客」功能，结合 Hexo 和 GitHub Pages，搭建了一个自动发布的博客系统。\n这个博客也跟我的技术学习一样：一旦准备开始找工作就开始折腾，一旦工作找到了就处于半荒废状态了。\n当然了，技术文章和生活思考偶尔还是会写一下的，只不过一直记在了 WizNote 上，没有对外发布。\n随着接触到 Obsidian ，我逐渐将记录主力从 WizNote 迁移到 Obsidian。发现 Obsdian 适合知识管理和结构化写作，并支持通过 Git 管理文件版本。\n因此，我决定重构博客发布流程，实现：\n\n所有笔记通过 Obsidian 编写和管理\n通过 Git 同步 Obsidian 内容\n自动发布特定目录下的笔记为博客（如 50_Archives/博客发布 目录）\n利用 GitHub Actions 实现一键发布到 GitHub Pages\n\n\n原始方案（WizNote 方案）\n✅ 优点：Wiz上编写博客比较方便，早期 Wiz 有插件可以点击一键发布\n❌ 缺点：Wiz笔记还是需要收费的；后面新版貌似没有插件了；需要本地部署一个服务，如果没有外网服务，就只能在内网触发发布；无法定制，格式支持有限\n\n架构如下：\nWizNote（点击发布）    ↓ 触发接口Hexo 本地生成页面    ↓ 自动执行 deployGitHub Pages 展示博客\n\n\n改进方案（Obsidian + GitHub Actions 自动发布）\n✅ 优点：免费、自动化、灵活、完全自控、与 Obsidian 紧密集成\n❌ 缺点：需要配置一次 GitHub Actions、Hexo、Secrets\n\n核心思路将 Obsidian 的 50_Archives/博客发布/ 目录作为博客内容源，通过 GitHub Action 自动触发 Hexo 构建和发布：\nObsidian    ↓ 自动同步到 GitHub 仓库 A（life-notes）GitHub Actions（life-notes/.github/workflows/publish.yml）    ↓ 拉取博客项目仓库 B（hexo-blog）    ↓ 将 50_Archives/博客发布/ 下笔记复制为 Hexo 文章    ↓ hexo g &amp;&amp; hexo d发布到 GitHub Pages 仓库 C（yourname.github.io）\n\n\n实现步骤（含细节说明）步骤 1：准备三个 GitHub 仓库\n仓库 A（life-notes）：存放 Obsidian 的所有笔记\n仓库 B（hexo-blog）：Hexo 博客项目，含主题等\n仓库 C（yourname.github.io）：用于部署 GitHub Pages（GitHub Pages 绑定到此仓库）\n\n步骤 2：配置仓库 A（life-notes）a. 创建目录结构在 Obsidian 仓库内增加 blog/ 目录用于存放博客笔记。\nb. 自动同步 Obsidian 到 GitHub\n安装 Obsidian Git 插件（Community plugins → Obsidian Git）\n\n配置自动推送选项：\n\n打开设置 → Obsidian Git\n启用 Auto pull on startup、Auto push on save\n填入 GitHub 仓库地址（需本地已有 .git 初始化）\n\n\n输入 GitHub Token（需权限包括 repo）\n\n\nc. 配置 GitHub Secrets前往 life-notes 仓库 → Settings → Secrets → Actions：\n\n\n\nName\n说明\n\n\n\nDEPLOY_REPO\nHexo deploy 仓库地址，如：youname/youname.github.io\n\n\nDEPLOY_TOKEN\nGitHub Token（具有 push 权限）\n\n\nd：配置 GitHub Actions新建 .github/workflows/publish.yml\nname: Deploy Hexo Blogon:  push:    paths:      - &#x27;50_Archives/博客发布/**&#x27;    branches:      - mainjobs:  build-deploy:    runs-on: ubuntu-latest    steps:      - name: Clone Obsidian Notes (life-notes 仓库)        uses: actions/checkout@v3      - name: Set up Node.js        uses: actions/setup-node@v3        with:          node-version: &#x27;18&#x27;      - name: Clone Hexo Blog Repo        run: |          git clone https://github.com/yourname/hexo-blog.git blog-temp          # 这是我的主题，可以根据实际情况调整          git clone https://github.com/jerryc127/hexo-theme-butterfly.git blog-temp/themes/butterfly      - name: Clean old blog posts        run: |          rm -rf blog-temp/source/_posts/*      - name: Sync Blog Notes        run: |          cp -r 50_Archives/博客发布/* blog-temp/source/_posts/      - name: Install Dependencies &amp; Build        run: |          cd blog-temp          npm install          npx hexo clean          npx hexo generate      - name: Deploy to GitHub Pages        run: |          cd blog-temp/public          git init          git config user.name &quot;youername&quot;          git config user.email &quot;youremail.gmail.com&quot;          git checkout -b gh-pages          git remote add origin https://x-access-token:$&#123;&#123; secrets.DEPLOY_TOKEN &#125;&#125;@github.com/yourname/yourname.github.io.git          git add .          git commit -m &quot;🚀 Deploy at $(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;          git push --force origin gh-pages\n\n步骤 3：配置 Hexo 博客仓库 B（hexo-blog）a. 初始化 Hexo 项目npm install -g hexo-clihexo init .npm install\n\nb. 配置Hexo主题# 此步骤省略，需要保证有 source/_posts 目录\n\nc. 推送到Github仓库git initgit remote add origin https://github.com/yourname/hexo-blog.gitgit add .git commit -m &quot;init&quot;git push -u origin main\n\n\n\n步骤 4：配置 GitHub Pages 仓库 C（yourname.github.io）这个仓库用于承载最终生成的博客 HTML 页面，是用户访问你博客时实际访问的地址，例如：\nhttps://yourname.github.io/\n\na. 创建仓库\n打开 GitHub，新建一个名为 yourname.github.io 的仓库（名字必须与用户名一致，GitHub Pages 才能识别为主域）\n不勾选初始化选项（README、LICENSE 等）\n\nb. 启用 GitHub Pages 功能\n打开仓库 → Settings → Pages\n\n在 “Source” 处选择：\n\n分支：gh-pages\n路径：/ (root)\n\n\n保存，稍等几秒，GitHub 会生成访问地址，如：\nhttps://yourname.github.io/\n\nc. 首次部署验证完成 GitHub Actions 配置并推送一次笔记后，会触发自动构建流程。如果一切正常：\n\nGitHub Actions 会将 Hexo 生成的内容推送到 gh-pages 分支\n页面几分钟内会上线，你可访问上述网址查看效果\n\nd. （可选）自定义域名如你拥有自己的域名，可以在此仓库根目录添加 CNAME 文件，例如：\nblog.myname.com\n\n然后去你的域名管理平台设置 CNAME 解析，指向 yourname.github.io。\n✍️ 博客写作格式要求Hexo 使用 Markdown，但要求每篇文章前加入 YAML Front Matter，用于识别文章标题、时间、分类等。\n✅ 合法格式示例：---title: 我的第一篇博客date: 2025-07-24 08:00:00tags: [Obsidian, Hexo]categories: 技术笔记---这是正文内容，可以包含代码块、图片、引用等。\n\n❗避免的问题：\n没有 --- Front Matter（Hexo 不会识别）\n使用 Obsidian 特有语法（如 ![[链接]]、Dataview 语句）\n\n\n🔧 模版化写作（推荐做法）为提高效率并避免格式错误，推荐在 Obsidian 中使用模版插件（如 Templater）实现博客模版写作。\n✅ 示例模版：---title: &#123;&#123;title&#125;&#125;date: &#123;&#123;date:YYYY-MM-DD HH:mm:ss&#125;&#125;tags: [笔记]categories: 默认分类---## 简介## 正文\n\n\n总结\n原始方案依赖 WizNote，适合初学者尝试；\n新方案基于 Obsidian + GitHub Action 更自动化、更可控；\n只需维护 Obsidian 中的 50_Archives/博客发布/ 目录，即可持续写作和发布；\n自动同步 + 自动发布一气呵成，最大限度提升写作效率。\n\n遗留问题\n图片如何展示和同步？\n博客和笔记需要写在一起吗？\n\n","categories":["技术笔记"],"tags":["Obsidian","Hexo","技术/博客"]}]